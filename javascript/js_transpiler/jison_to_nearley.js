/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jison_to_nearley = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,16],$V2=[1,13],$V3=[1,15],$V4=[11,24],$V5=[11,13,24],$V6=[11,13,16,24],$V7=[8,11,13,16,23,24,26],$V8=[1,37],$V9=[1,42],$Va=[1,41],$Vb=[1,45],$Vc=[1,29],$Vd=[1,30],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,43],$Vi=[1,38],$Vj=[1,44],$Vk=[1,46],$Vl=[1,51],$Vm=[1,49],$Vn=[1,50],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,64],$VB=[1,65],$VC=[1,66],$VD=[1,67],$VE=[1,68],$VF=[9,11,13,20,24,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,66],$VG=[9,11,13,20,24,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,56,58,59,66],$VH=[1,83],$VI=[1,82],$VJ=[20,66],$VK=[24,59],$VL=[9,11,13,20,24,30,32,59,66],$VM=[9,11,13,20,24,30,32,33,34,59,66],$VN=[9,11,13,20,24,30,32,33,34,35,36,37,38,39,41,42,44,59,66],$VO=[9,11,13,20,24,30,32,33,34,35,36,37,38,39,40,41,42,43,44,59,66],$VP=[9,11,13,20,24,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,59,66];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"grammar_expressions":3,"grammar_statements":4,"EOF":5,"grammar_statements_":6,"grammar_statement":7,"IDENTIFIER":8,":":9,"grammar_or":10,";":11,"grammar_and_":12,"|":13,"grammar_and":14,"grammar_output_array":15,"{":16,"$$":17,"=":18,"e":19,"}":20,"return":21,"grammar_e":22,"(":23,")":24,"grammar_var":25,"STRING_LITERAL":26,"access_modifier":27,"public":28,"private":29,"?":30,"...":31,"||":32,"&&":33,"&":34,"!==":35,"===":36,"in":37,"instanceof":38,"<=":39,"<<":40,"<":41,">=":42,">>":43,">":44,"+":45,"-":46,"*":47,"/":48,"%":49,"not_expr":50,"!":51,"dot_expr":52,"typeof":53,"await":54,"parentheses_expr":55,".":56,"access_array":57,"[":58,"]":59,"exprs":60,"new":61,"parentheses_expr_":62,"key_values":63,"NUMBER":64,"GRAMMAR_INDEX":65,",":66,"key_value":67,"identifiers":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"IDENTIFIER",9:":",11:";",13:"|",16:"{",17:"$$",18:"=",20:"}",21:"return",23:"(",24:")",26:"STRING_LITERAL",28:"public",29:"private",30:"?",31:"...",32:"||",33:"&&",34:"&",35:"!==",36:"===",37:"in",38:"instanceof",39:"<=",40:"<<",41:"<",42:">=",43:">>",44:">",45:"+",46:"-",47:"*",48:"/",49:"%",51:"!",53:"typeof",54:"await",56:".",58:"[",59:"]",61:"new",64:"NUMBER",65:"GRAMMAR_INDEX",66:","},
productions_: [0,[3,2],[6,2],[6,1],[4,1],[7,4],[10,3],[10,1],[12,1],[12,2],[15,6],[15,5],[14,2],[14,1],[22,3],[22,1],[22,1],[25,1],[27,1],[27,1],[19,5],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,1],[50,2],[50,2],[50,2],[50,1],[52,3],[52,1],[57,4],[55,3],[55,4],[55,4],[55,5],[55,1],[55,1],[62,3],[62,2],[62,3],[62,3],[62,2],[62,1],[62,1],[62,1],[62,1],[60,3],[60,1],[63,3],[63,1],[67,3],[67,3],[68,3],[68,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 9:
this.$ = $$[$0-1]+" "+$$[$0];
break;
case 3: case 48:
this.$ =
 $$[$0];
break;
case 4: case 46: case 68: case 72:
this.$ = $$[$0];
break;
case 5:
this.$ = $$[$0-3]+"->"+$$[$0-1];
break;
case 6:
this.$= $$[$0-2]+"|"+$$[$0];
break;
case 10:
this.$ = "{%function(d){return "+$$[$0-2]+";}%}";
break;
case 11:
this.$ = "{%function(d){return "+$$[$0-2]+";} %}";
break;
case 12:
this.$= $$[$0-1]+" "+$$[$0];
break;
case 14:
this.$= "("+$$[$0-1]+")";
break;
case 16: case 61: case 62: case 63:
this.$ = yytext;
break;
case 17:
this.$= $$[$0];
break;
case 20:
this.$ = [$$[$0-4],"?",$$[$0-2],":",$$[$0]].join("")
break;
case 21:
this.$="..."+$$[$0]
break;
case 22: case 23: case 24: case 25: case 28: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40:
this.$ = [$$[$0-2],$$[$0-1],$$[$0]].join("");
break;
case 26: case 27:
this.$ = [$$[$0-2],"$$[$0-1]",$$[$0]].join("");
break;
case 29:
this.$ = [$$[$0-2]," ",$$[$0-1]," ",$$[$0]].join("");
break;
case 41:
this.$ = ["-",$$[$0]].join("");
break;
case 43:
this.$ = "!"+$$[$0];
break;
case 44:
this.$ = "typeof "+$$[$0];
break;
case 45:
this.$ = "await "+$$[$0]
break;
case 47:
this.$ = $$[$0-2]+"."+$$[$0];
break;
case 49:
this.$ = $$[$0-3]+"["+$$[$0-1]+"]";
break;
case 50:
this.$= $$[$0-2]+"()";
break;
case 51:
this.$= $$[$0-3]+"("+$$[$0-1]+")";
break;
case 52:
this.$= "new "+$$[$0-2]+"()";
break;
case 53:
this.$= "new "+$$[$0-3]+"("+$$[$0-1]+")";
break;
case 56:
this.$ = "("+$$[$0-1]+")";
break;
case 57:
this.$ = "{}";
break;
case 58:
this.$ = "{"+$$[$0-1]+"}";
break;
case 59:
this.$ = "["+$$[$0-1]+"]";
break;
case 60:
this.$ = "[]"
break;
case 64:
this.$ = "d["+$$[$0].substring(1)+"]";
break;
case 65:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 66:
this.$ = [$$[$0]];
break;
case 67: case 71:
this.$ = $$[$0-2]+","+$$[$0];
break;
case 69:
this.$ = $$[$0-2]+":"+$$[$0];
break;
case 70:
this.$ = "\""+$$[$0-2]+"\""+":"+$$[$0];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0},{1:[3]},{5:[1,6]},{5:[2,4]},{5:[2,3],6:7,7:4,8:$V0},{9:[1,8]},{1:[2,1]},{5:[2,2]},{8:$V1,10:9,12:10,14:11,22:12,23:$V2,25:14,26:$V3},{11:[1,17]},o($V4,[2,7],{13:[1,18]}),o($V5,[2,8],{15:19,16:[1,20]}),o($V6,[2,13],{22:12,25:14,14:21,8:$V1,23:$V2,26:$V3}),{8:$V1,10:22,12:10,14:11,22:12,23:$V2,25:14,26:$V3},o($V7,[2,15]),o($V7,[2,16]),o($V7,[2,17]),o([5,8],[2,5]),{8:$V1,10:23,12:10,14:11,22:12,23:$V2,25:14,26:$V3},o($V5,[2,9]),{17:[1,24],21:[1,25]},o($V6,[2,12]),{24:[1,26]},o($V4,[2,6]),{18:[1,27]},{8:$V8,16:$V9,19:28,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},o($V7,[2,14]),{8:$V8,16:$V9,19:47,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{11:[1,48],13:$Vl,30:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE},{8:$V8,16:$V9,19:69,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:70,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},o($VF,[2,42]),{8:$V8,16:$V9,23:$Va,26:$Vb,52:71,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,23:$Va,26:$Vb,52:72,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,23:$Va,26:$Vb,52:73,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},o($VF,[2,46]),o($VF,[2,48],{56:[1,74],58:[1,75]}),o($VG,[2,62],{23:[1,76]}),{8:[1,77]},o($VG,[2,54]),o($VG,[2,55]),{8:$V8,16:$V9,19:78,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$VH,20:[1,79],26:$VI,63:80,67:81},{8:$V8,16:$V9,19:86,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,59:[1,85],60:84,61:$Vi,62:40,64:$Vj,65:$Vk},o($VG,[2,61]),o($VG,[2,63]),o($VG,[2,64]),{11:[1,87],13:$Vl,30:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE},{20:[1,88]},{8:$V8,16:$V9,19:89,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:90,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:91,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:92,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:93,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:94,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:95,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:96,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:97,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:98,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:99,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:100,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:101,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:102,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:103,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:104,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:105,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:106,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:107,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:108,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},o([9,11,20,24,30,59,66],[2,21],{13:$Vl,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VF,[2,41]),o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,45]),{8:$V8,16:$V9,23:$Va,26:$Vb,52:109,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:110,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:86,23:$Va,24:[1,111],26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,60:112,61:$Vi,62:40,64:$Vj,65:$Vk},{23:[1,113]},{13:$Vl,24:[1,114],30:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE},o($VG,[2,57]),{20:[1,115],66:[1,116]},o($VJ,[2,68]),{9:[1,117]},{9:[1,118]},{59:[1,119]},o($VG,[2,60]),o($VK,[2,66],{13:$Vl,30:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,66:[1,120]}),{20:[1,121]},o($V5,[2,11]),{9:[1,122],13:$Vl,30:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE},o($VL,[2,22],{33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VL,[2,23],{33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VM,[2,24],{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VM,[2,25],{35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VN,[2,26],{40:$Vv,43:$Vy,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VN,[2,27],{40:$Vv,43:$Vy,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VN,[2,28],{40:$Vv,43:$Vy,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VN,[2,29],{40:$Vv,43:$Vy,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VN,[2,30],{40:$Vv,43:$Vy,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VO,[2,31],{45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VN,[2,32],{40:$Vv,43:$Vy,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VN,[2,33],{40:$Vv,43:$Vy,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VO,[2,34],{45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VN,[2,35],{40:$Vv,43:$Vy,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VP,[2,36],{47:$VC,48:$VD,49:$VE}),o($VP,[2,37],{47:$VC,48:$VD,49:$VE}),o($VF,[2,38]),o($VF,[2,39]),o($VF,[2,40]),o($VF,[2,47]),{13:$Vl,30:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,59:[1,123]},o($VG,[2,50]),{24:[1,124]},{8:$V8,16:$V9,19:86,23:$Va,24:[1,125],26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,60:126,61:$Vi,62:40,64:$Vj,65:$Vk},o($VG,[2,56]),o($VG,[2,58]),{8:$VH,26:$VI,67:127},{8:$V8,16:$V9,19:128,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},{8:$V8,16:$V9,19:129,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},o($VG,[2,59]),{8:$V8,16:$V9,19:86,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,60:130,61:$Vi,62:40,64:$Vj,65:$Vk},o($V5,[2,10]),{8:$V8,16:$V9,19:131,23:$Va,26:$Vb,31:$Vc,46:$Vd,50:31,51:$Ve,52:35,53:$Vf,54:$Vg,55:36,57:39,58:$Vh,61:$Vi,62:40,64:$Vj,65:$Vk},o($VG,[2,49]),o($VG,[2,51]),o($VG,[2,52]),{24:[1,132]},o($VJ,[2,67]),o($VJ,[2,69],{13:$Vl,30:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VJ,[2,70],{13:$Vl,30:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VK,[2,65]),o([9,11,20,24,59,66],[2,20],{13:$Vl,30:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE}),o($VG,[2,53])],
defaultActions: {3:[2,4],6:[2,1],7:[2,2]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 64
break;
case 4:return 26
break;
case 5:return 65
break;
case 6:return "%lex"
break;
case 7:return "%%"
break;
case 8:return "$$"
break;
case 9:return "import"
break;
case 10:return "from"
break;
case 11:return "function"
break;
case 12:return "extends"
break;
case 13:return "continue"
break;
case 14:return "typeof"
break;
case 15:return "class"
break;
case 16:return "constructor"
break;
case 17:return 'const'
break;
case 18:return 'static'
break;
case 19:return 'get'
break;
case 20:return 'set'
break;
case 21:return 'if'
break;
case 22:return 'do'
break;
case 23:return 61
break;
case 24:return 'else'
break;
case 25:return "case"
break;
case 26:return 'default'
break;
case 27:return 21
break;
case 28:return 'yield'
break;
case 29:return 'while'
break;
case 30:return 'switch'
break;
case 31:return 'break'
break;
case 32:return 'for'
break;
case 33:return 'var'
break;
case 34:return 'of'
break;
case 35:return 66
break;
case 36:return 11
break;
case 37:return 31
break;
case 38:return 56
break;
case 39:return 9
break;
case 40:return 33
break;
case 41:return 34
break;
case 42:return 32
break;
case 43:return 13
break;
case 44:return 42
break;
case 45:return 43
break;
case 46:return 44
break;
case 47:return 39
break;
case 48:return 40
break;
case 49:return 41
break;
case 50:return '=>'
break;
case 51:return 36
break;
case 52:return 35
break;
case 53:return "!"
break;
case 54:return 18
break;
case 55:return '%='
break;
case 56:return 49
break;
case 57:return '*='
break;
case 58:return '**'
break;
case 59:return 47
break;
case 60:return '/='
break;
case 61:return 48
break;
case 62:return '-='
break;
case 63:return '--'
break;
case 64:return 46
break;
case 65:return '++'
break;
case 66:return '+='
break;
case 67:return 45
break;
case 68:return '^'
break;
case 69:return 16
break;
case 70:return 20
break;
case 71:return 30
break;
case 72:return 23
break;
case 73:return 24
break;
case 74:return 58
break;
case 75:return 59
break;
case 76:return 38
break;
case 77:return 37
break;
case 78:return 8
break;
case 79:return 5
break;
case 80:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$[0-9]+(\.[0-9]+)?\b)/,/^(?:%lex\b)/,/^(?:%%)/,/^(?:\$\$)/,/^(?:import\b)/,/^(?:from\b)/,/^(?:function\b)/,/^(?:extends\b)/,/^(?:continue\b)/,/^(?:typeof\b)/,/^(?:class\b)/,/^(?:constructor\b)/,/^(?:const\b)/,/^(?:static\b)/,/^(?:get\b)/,/^(?:set\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:new\b)/,/^(?:else\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:break\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:=>)/,/^(?:===)/,/^(?:!==)/,/^(?:!)/,/^(?:=)/,/^(?:%=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\?)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:instanceof\b)/,/^(?:in\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jison_to_nearley;
exports.Parser = jison_to_nearley.Parser;
exports.parse = function () { return jison_to_nearley.parse.apply(jison_to_nearley, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}