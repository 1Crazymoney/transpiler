/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,19],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,18],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[5,23,24,29,30,33,36,38,41,42,44,46,54,55,56],$Vf=[1,40],$Vg=[10,27],$Vh=[24,83],$Vi=[2,110],$Vj=[2,111],$Vk=[1,53],$Vl=[1,65],$Vm=[1,62],$Vn=[1,63],$Vo=[1,55],$Vp=[1,57],$Vq=[1,64],$Vr=[1,66],$Vs=[1,68],$Vt=[2,128],$Vu=[1,82],$Vv=[1,83],$Vw=[1,84],$Vx=[5,23,24,29,30,32,33,36,38,41,42,44,46,51,54,55,56],$Vy=[1,94],$Vz=[1,104],$VA=[1,111],$VB=[1,112],$VC=[1,113],$VD=[1,114],$VE=[1,115],$VF=[1,116],$VG=[1,117],$VH=[1,118],$VI=[1,119],$VJ=[1,120],$VK=[1,121],$VL=[1,122],$VM=[1,123],$VN=[1,124],$VO=[1,125],$VP=[10,27,32,50,59,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,94],$VQ=[10,25,27,32,50,59,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,89,94],$VR=[1,135],$VS=[1,151],$VT=[2,118],$VU=[1,156],$VV=[32,51],$VW=[23,24,29,30,32,33,36,38,41,42,44,46,51,54,55,56],$VX=[5,23,24,29,30,32,33,36,38,41,42,44,46,51,54,55,56,99],$VY=[27,32],$VZ=[27,32,94],$V_=[32,94],$V$=[10,27,32,50,59,70,71,72,73,74,75,76,77,78,79,94],$V01=[10,27,32,50,59,70,71,72,73,74,75,76,77,78,79,80,81,94],$V11=[24,32,36],$V21=[27,94],$V31=[1,252],$V41=[1,255],$V51=[32,53];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statements_":7,"statements_with_vars":8,"initialize_var_":9,";":10,"statements_without_vars":11,"statement":12,"initialize_var1":13,"struct_statements":14,"struct_statement":15,"type":16,"identifiers":17,"set_array_size":18,"statements":19,"access_modifier":20,"public":21,"private":22,"#define":23,"IDENTIFIER":24,"(":25,"exprs":26,")":27,"expr":28,"typedef":29,"struct":30,"{":31,"}":32,"enum":33,"enum_statements":34,"parameters":35,"void":36,"statement_with_semicolon":37,"while":38,"e":39,"bracket_statements":40,"do":41,"switch":42,"case_statements":43,"for":44,"statement_with_semicolon_":45,"if":46,"elif":47,"case_statement":48,"case":49,":":50,"break":51,"case_statements_":52,"default":53,"return":54,"continue":55,"const":56,"=":57,"[":58,"]":59,"access_array":60,"++":61,"--":62,"+=":63,"-=":64,"*=":65,"parentheses_expr_":66,"/=":67,"initialize_var":68,"initialize_vars":69,"?":70,"||":71,"&&":72,"<=":73,"<":74,">=":75,">":76,"^":77,"==":78,"!=":79,"+":80,"-":81,"%":82,"*":83,"/":84,"not_expr":85,"!":86,"dot_expr":87,"parentheses_expr":88,".":89,"function_call":90,"initialize_struct":91,"NUMBER":92,"STRING_LITERAL":93,",":94,"initialize_struct_":95,"parameter":96,"&":97,"types":98,"else":99,"enum_statement":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",21:"public",22:"private",23:"#define",24:"IDENTIFIER",25:"(",27:")",29:"typedef",30:"struct",31:"{",32:"}",33:"enum",36:"void",38:"while",41:"do",42:"switch",44:"for",46:"if",49:"case",50:":",51:"break",53:"default",54:"return",55:"continue",56:"const",57:"=",58:"[",59:"]",61:"++",62:"--",63:"+=",64:"-=",65:"*=",67:"/=",70:"?",71:"||",72:"&&",73:"<=",74:"<",75:">=",76:">",77:"^",78:"==",79:"!=",80:"+",81:"-",82:"%",83:"*",84:"/",86:"!",89:".",92:"NUMBER",93:"STRING_LITERAL",94:",",97:"&",99:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,2],[7,3],[11,2],[11,1],[8,3],[8,1],[14,2],[14,1],[15,3],[15,2],[19,1],[20,1],[20,1],[6,1],[6,2],[12,8],[12,7],[12,4],[12,6],[12,6],[12,8],[12,8],[12,2],[12,5],[12,7],[12,7],[12,9],[12,6],[12,5],[45,1],[45,1],[48,6],[52,2],[52,1],[43,4],[43,1],[37,3],[37,4],[37,2],[37,1],[37,1],[37,5],[37,7],[37,1],[37,2],[37,3],[37,3],[37,2],[37,2],[37,2],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[66,1],[66,1],[13,1],[68,1],[9,4],[9,6],[69,3],[69,1],[18,2],[39,5],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,4],[39,4],[39,3],[39,3],[39,2],[39,1],[85,2],[85,1],[87,3],[87,1],[60,4],[88,1],[88,1],[88,3],[88,2],[88,3],[88,3],[88,1],[88,1],[88,1],[91,3],[91,1],[95,4],[90,3],[90,4],[16,1],[16,1],[96,3],[96,2],[96,4],[96,3],[35,3],[35,1],[35,0],[26,3],[26,1],[28,2],[28,1],[98,3],[98,1],[47,7],[47,2],[17,3],[17,1],[34,3],[34,1],[100,3],[40,3],[40,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 7:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 8: case 12: case 38: case 70: case 94: case 106: case 117:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = [["semicolon",["initialize_var"].concat($$[$0-1])]]
break;
case 6:
this.$ = [["lexically_scoped_vars",[["lexically_scoped_var"].concat($$[$0-2])],["statements",$$[$0]]]]
break;
case 9:
this.$ = $$[$0-2].concat([["semicolon",$$[$0-1]]]);
break;
case 11: case 37:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 13:
this.$ = ["struct_statement",$$[$0-2],$$[$0-1]];
break;
case 14:
this.$ = ["semicolon", $$[$0-1]];
break;
case 15:
this.$ = ["statements",$$[$0]]
break;
case 19:
this.$ = ["semicolon",$$[$0-1]]
break;
case 20:
this.$ = ["macro",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 21:
this.$ = ["struct",$$[$0-1],["struct_statements",$$[$0-3]]]
break;
case 22:
this.$ = ["typedef",$$[$0-2],$$[$0-1]]
break;
case 23:
this.$ = ["struct",$$[$0-4],["struct_statements",$$[$0-2]]]
break;
case 24:
this.$ = ["enum","public",$$[$0-4],$$[$0-2]];
break;
case 25:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["function","public",$$[$0-7],$$[$0-6],[],$$[$0-1]];
break;
case 27: case 133:
this.$ = ["semicolon",$$[$0-1]];
break;
case 28:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 29:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 30:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 31:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 32:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 33:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 36:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 39:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 41: case 108:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 42: case 109:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 43:
this.$ = ["return",$$[$0]];
break;
case 44:
this.$ = ["return"];
break;
case 45:
this.$ = ["continue"];
break;
case 46:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 47:
this.$ = ["initialize_constant",[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 49:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 50: case 51:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 52: case 53: case 54: case 55:
this.$ = [$$[$0],$$[$0-1]];
break;
case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 87: case 88:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 65:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 66:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 67:
this.$ = [$$[$0-3],$$[$0-2],$$[$0]];
break;
case 68:
this.$ = [[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 69: case 105:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 71:
this.$ = ["set_array_size",$$[$0-1],$$[$0][1],$$[$0][2]];
break;
case 72:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 85:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 86:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 89:
this.$ = ["-",$$[$0]];
break;
case 91:
this.$ = ["!", [".",$$[$0]]];
break;
case 92:
this.$ = [".", $$[$0]];
break;
case 93: case 116: case 119: case 123: case 127: case 129:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 95:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 98:
this.$ = ["parentheses",$$[$0-1]];
break;
case 99:
this.$ = ["initializer_list","Object",[]];
break;
case 100:
this.$ = ["initialize_struct","Object",$$[$0-1]];
break;
case 101:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 102: case 103: case 104:
this.$ = yytext;
break;
case 107:
this.$ = ["initialize_struct_",$$[$0-2],$$[$0]]
break;
case 112:
this.$ = ["ref_parameter",$$[$0-2],$$[$0]]
break;
case 113:
this.$ = [$$[$0-1],$$[$0]];
break;
case 114:
this.$ = [[$$[$0-3],"[]"],$$[$0-2]];
break;
case 115:
this.$ = ["final_parameter",$$[$0-1],$$[$0]]
break;
case 118:
this.$ = [];
break;
case 120: case 122: case 124: case 128: case 130:
this.$ = [$$[$0]];
break;
case 121:
this.$ = ["function_call_ref",$$[$0]];
break;
case 125:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 126:
this.$ = ["else",$$[$0]];
break;
case 131:
this.$ = ["enum_statement",$$[$0-2],$$[$0]]
break;
case 132:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,9:17,12:4,13:5,16:10,18:23,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},{1:[3]},{5:[1,26],6:27,9:17,12:4,13:5,16:10,18:23,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},o($Ve,[2,3]),o($Ve,[2,18]),{10:[1,28]},{24:[1,29]},{24:[1,31],30:[1,30]},{24:[1,32]},{24:[1,33]},{17:35,24:[1,34],60:36},{10:[1,37]},{25:[1,38]},{16:42,18:23,24:$V1,31:$Vf,36:$V5,37:41,40:39,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},{25:[1,43]},{25:[1,44]},{25:[1,45]},o($Vg,[2,65]),o($Vh,$Vi),o([24,67],$Vj,{25:[1,46],57:[1,47],58:$Vk,61:[1,48],62:[1,49],63:[1,50],64:[1,51],65:[1,52]}),o($Vg,[2,44],{39:54,85:56,87:58,88:59,60:60,90:61,24:$Vl,25:$Vm,31:$Vn,81:$Vo,86:$Vp,92:$Vq,93:$Vr}),o($Vg,[2,45]),{16:67,24:$Vs,36:$V5},o($Vg,[2,48]),{57:[1,69],61:[1,70],62:[1,71],63:[1,72],64:[1,73],65:[1,74],67:[2,63]},{67:[1,75]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,19]),{25:[1,76]},{31:[1,77]},{24:[1,78]},{31:[1,79]},{31:[1,80]},{10:$Vt,25:[1,81],57:$Vu,58:$Vv,94:$Vw},o($Vg,[2,49]),o($Vg,[2,71]),o($Vx,[2,27]),{24:$Vl,25:$Vm,31:$Vn,39:85,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{38:[1,86]},{7:88,8:89,9:90,11:91,12:92,16:10,18:23,19:87,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},{10:[1,93]},{17:35,24:$Vy,60:36},{24:$Vl,25:$Vm,31:$Vn,39:95,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{9:17,13:97,16:99,18:23,24:$V1,36:$V5,37:98,45:96,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},{24:$Vl,25:$Vm,31:$Vn,39:100,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,26:102,27:[1,101],28:103,31:$Vn,39:105,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr,97:$Vz},{24:$Vl,25:$Vm,31:$Vn,39:106,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o($Vg,[2,52]),o($Vg,[2,54]),{24:$Vl,25:$Vm,31:$Vn,39:107,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:108,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:109,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:110,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o($Vg,[2,43],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),{24:$Vl,25:$Vm,31:$Vn,39:126,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o($VP,[2,90]),{24:$Vl,25:$Vm,31:$Vn,60:60,87:127,88:59,90:61,92:$Vq,93:$Vr},o($VP,[2,92]),o($VP,[2,94],{25:[1,129],89:[1,128]}),o($VQ,[2,96]),o($VQ,[2,97]),{24:$Vl,25:$Vm,31:$Vn,39:130,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,26:133,28:103,31:$Vn,32:[1,131],39:105,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,89:$VR,90:61,91:132,92:$Vq,93:$Vr,95:134,97:$Vz},o($VQ,[2,102]),o($VQ,[2,103],{58:$Vk}),o($VQ,[2,104]),{24:[1,136]},o($Vh,$Vj),{24:$Vl,25:$Vm,31:$Vn,39:137,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o($Vg,[2,53]),o($Vg,[2,55]),{24:$Vl,25:$Vm,31:$Vn,39:138,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:139,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:140,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:141,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,26:142,28:103,31:$Vn,39:105,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr,97:$Vz},{14:143,15:144,16:145,18:146,24:$Vs,36:$V5},{10:[1,147]},{14:148,15:144,16:145,18:146,24:$Vs,36:$V5},{24:$VS,34:149,100:150},{16:155,24:$Vs,27:$VT,35:152,36:[1,153],56:$VU,96:154},{24:$Vl,25:$Vm,31:$Vn,39:157,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:110,59:[1,158],60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{17:159,24:[1,160]},{27:[1,161],70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO},{25:[1,162]},{32:[1,163]},o($VV,[2,15]),o($VV,[2,4]),{10:[1,164]},o($VV,[2,10],{16:10,37:11,9:17,18:23,60:24,66:25,13:165,12:166,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd}),o($VW,[2,8]),o($VX,[2,133]),{10:$Vt,58:$Vk,94:$Vw},{27:[1,167],70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO},{10:[1,168]},o($Vg,[2,34]),o($Vg,[2,35]),{17:35,24:[1,169],60:36},{27:[1,170],70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO},o($Vg,[2,41]),{27:[1,171]},o($VY,[2,120],{94:[1,172]}),{24:$Vl,25:$Vm,31:$Vn,39:173,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o($VZ,[2,122],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vg,[2,51],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vg,[2,56],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vg,[2,58],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vg,[2,60],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),{59:[1,174],70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO},{24:$Vl,25:$Vm,31:$Vn,39:175,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:176,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:177,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:178,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:179,60:60,74:[1,180],81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:181,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:182,60:60,76:[1,183],81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:184,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:185,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:186,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:187,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:188,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:189,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:190,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,31:$Vn,39:191,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o($VP,[2,89]),o($VP,[2,91]),{24:$Vl,25:$Vm,31:$Vn,60:60,87:192,88:59,90:61,92:$Vq,93:$Vr},{24:$Vl,25:$Vm,26:194,27:[1,193],28:103,31:$Vn,39:105,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr,97:$Vz},{27:[1,195],70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO},o($VQ,[2,99]),{32:[1,196],94:[1,197]},{32:[1,198]},o($V_,[2,106]),{24:[1,199]},{57:[1,200],58:[1,201]},o($Vg,[2,50],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vg,[2,57],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vg,[2,59],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vg,[2,61],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vg,[2,62],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),{27:[1,202]},{32:[1,203]},{14:204,15:144,16:145,18:146,24:$Vs,32:[2,12],36:$V5},{17:205,24:$Vy,60:36},{10:[1,206]},o($Vx,[2,22]),{32:[1,207]},{32:[1,208]},{32:[2,130],94:[1,209]},{57:[1,210]},{27:[1,211]},o($Vh,$Vi,{27:[1,212]}),{27:[2,117],94:[1,213]},{24:[1,215],83:[1,214]},{16:216,24:$Vs,36:$V5},o($Vg,[2,67],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),{57:[1,217]},o($Vg,[2,127]),o($Vg,$Vt,{94:$Vw}),{16:42,18:23,24:$V1,31:$Vf,36:$V5,37:41,40:218,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},{24:$Vl,25:$Vm,31:$Vn,39:219,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o($VX,[2,132]),o($VV,[2,5],{16:10,37:11,18:23,60:24,66:25,8:89,9:90,11:91,12:92,7:220,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd}),{10:[1,221]},o($VW,[2,7]),{31:[1,222]},{24:$Vl,25:$Vm,31:$Vn,39:223,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o($Vg,$Vt,{57:$Vu,58:$Vv,94:$Vw}),{16:42,18:23,24:$V1,31:$Vf,36:$V5,37:41,40:224,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},o($Vg,[2,42]),{24:$Vl,25:$Vm,26:225,28:103,31:$Vn,39:105,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr,97:$Vz},o($VZ,[2,121],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o([10,25,27,32,50,57,59,61,62,63,64,65,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,89,94],[2,95]),{50:[1,226],70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO},o([10,27,32,50,59,70,71,94],[2,73],{72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o([10,27,32,50,59,70,71,72,94],[2,74],{73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($V$,[2,75],{80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($V$,[2,76],{80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),{24:$Vl,25:$Vm,31:$Vn,39:227,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o($V$,[2,77],{80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($V$,[2,78],{80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),{24:$Vl,25:$Vm,31:$Vn,39:228,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o([10,27,32,50,59,70,71,72,77,94],[2,79],{73:$VD,74:$VE,75:$VF,76:$VG,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($V$,[2,80],{80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($V$,[2,81],{80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($V01,[2,82],{82:$VM,83:$VN,84:$VO}),o($V01,[2,83],{82:$VM,83:$VN,84:$VO}),o($VP,[2,84]),o($VP,[2,87]),o($VP,[2,88]),o($VP,[2,93]),o($VQ,[2,108]),{27:[1,229]},o($VQ,[2,98]),o($VQ,[2,100]),{89:$VR,95:230},o($VQ,[2,101]),{57:[1,231]},{24:$Vl,25:$Vm,31:$Vn,39:232,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{59:[1,233]},{25:[1,234]},{24:[1,235]},{32:[2,11]},{10:[1,236]},o($V11,[2,14]),{10:[1,237]},{10:[1,238]},{24:$VS,34:239,100:150},{92:[1,240]},{31:[1,241]},{31:[1,242]},{16:155,24:$Vs,27:$VT,35:243,36:$V5,56:$VU,96:154},{24:[1,244]},o($V21,[2,113],{58:[1,245]}),{24:[1,246]},{24:$Vl,25:$Vm,31:$Vn,39:247,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o($Vx,[2,28]),{27:[1,248],70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO},o($VV,[2,6]),o($VV,[2,9]),{43:249,48:251,49:$V31,52:250},{10:[1,253],70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO},o($Vx,[2,33],{47:254,99:$V41}),o($VY,[2,119]),{24:$Vl,25:$Vm,31:$Vn,39:256,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o($V$,[2,86],{80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($V$,[2,85],{80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($VQ,[2,109]),o($V_,[2,105]),{24:$Vl,25:$Vm,31:$Vn,39:257,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},o($Vg,[2,46],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),{57:[1,258]},{24:$Vl,25:$Vm,28:259,31:$Vn,39:105,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr,97:$Vz},{10:[1,260]},o($V11,[2,13]),o($Vx,[2,23]),o($Vx,[2,24]),{32:[2,129]},o($V_,[2,131]),{7:88,8:89,9:90,11:91,12:92,16:10,18:23,19:261,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},{7:88,8:89,9:90,11:91,12:92,16:10,18:23,19:262,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},{27:[2,116]},o($V21,[2,112]),{59:[1,263]},o($V21,[2,115]),o($Vg,[2,68],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),{10:[1,264]},{32:[1,265]},{32:[2,40],53:[1,266]},o($V51,[2,38],{48:251,52:267,49:$V31}),{24:$Vl,25:$Vm,31:$Vn,39:268,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{9:17,13:97,16:99,18:23,24:$V1,36:$V5,37:98,45:269,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},o($Vx,[2,32]),{16:42,18:23,24:$V1,31:$Vf,36:$V5,37:41,40:271,46:[1,270],54:$Vb,55:$Vc,56:$Vd,60:24,66:25},o([10,27,32,50,59,94],[2,72],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($V_,[2,107],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),{24:$Vl,25:$Vm,31:$Vn,39:272,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{27:[1,273]},o($Vx,[2,21]),{32:[1,274]},{32:[1,275]},o($V21,[2,114]),o($Vx,[2,29]),o($Vx,[2,30]),{50:[1,276]},o($V51,[2,37]),{50:[1,277],70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO},{27:[1,278]},{25:[1,279]},o($Vx,[2,126]),o($Vg,[2,47],{70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vx,[2,20]),o($Vx,[2,25]),o($Vx,[2,26]),{7:88,8:89,9:90,11:91,12:92,16:10,18:23,19:280,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},{7:88,8:89,9:90,11:91,12:92,16:10,18:23,19:281,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},{16:42,18:23,24:$V1,31:$Vf,36:$V5,37:41,40:282,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},{24:$Vl,25:$Vm,31:$Vn,39:283,60:60,81:$Vo,85:56,86:$Vp,87:58,88:59,90:61,92:$Vq,93:$Vr},{32:[2,39]},{51:[1,284]},o($Vx,[2,31]),{27:[1,285],70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO},{10:[1,286]},{16:42,18:23,24:$V1,31:$Vf,36:$V5,37:41,40:287,54:$Vb,55:$Vc,56:$Vd,60:24,66:25},o([32,49,53],[2,36]),{47:288,99:$V41},o($Vx,[2,125])],
defaultActions: {26:[2,1],204:[2,11],239:[2,129],243:[2,116],280:[2,39]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 92
break;
case 4:return 93
break;
case 5:return 29
break;
case 6:return 23
break;
case 7:return "if"
break;
case 8:return 41
break;
case 9:return "else"
break;
case 10:return 33
break;
case 11:return "return"
break;
case 12:return "void"
break;
case 13:return "case"
break;
case 14:return "printf"
break;
case 15:return "while"
break;
case 16:return "break"
break;
case 17:return "default"
break;
case 18:return "const"
break;
case 19:return "struct"
break;
case 20:return "switch"
break;
case 21:return "continue"
break;
case 22:return "for"
break;
case 23:return 94
break;
case 24:return 10
break;
case 25:return 89
break;
case 26:return 50
break;
case 27:return 72
break;
case 28:return 97
break;
case 29:return 71
break;
case 30:return '|'
break;
case 31:return 79
break;
case 32:return 86
break;
case 33:return 75
break;
case 34:return '>>'
break;
case 35:return 76
break;
case 36:return 73
break;
case 37:return '<<'
break;
case 38:return 74
break;
case 39:return 78
break;
case 40:return 57
break;
case 41:return 65
break;
case 42:return 83
break;
case 43:return 82
break;
case 44:return 67
break;
case 45:return 84
break;
case 46:return 64
break;
case 47:return 62
break;
case 48:return 81
break;
case 49:return 61
break;
case 50:return 63
break;
case 51:return 80
break;
case 52:return 77
break;
case 53:return 70
break;
case 54:return 31
break;
case 55:return 32
break;
case 56:return 58
break;
case 57:return 59
break;
case 58:return 25
break;
case 59:return 27
break;
case 60:return 24
break;
case 61:return 5
break;
case 62:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:typedef\b)/,/^(?:#define\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:enum\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_parser;
exports.Parser = c_parser.Parser;
exports.parse = function () { return c_parser.parse.apply(c_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}