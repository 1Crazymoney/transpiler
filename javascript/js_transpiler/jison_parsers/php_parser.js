/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var php_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,24],$V2=[1,18],$V3=[2,37],$V4=[1,6],$V5=[1,26],$V6=[1,7],$V7=[1,8],$V8=[1,9],$V9=[1,10],$Va=[1,11],$Vb=[1,12],$Vc=[1,13],$Vd=[1,14],$Ve=[1,19],$Vf=[1,21],$Vg=[1,27],$Vh=[1,25],$Vi=[1,28],$Vj=[1,29],$Vk=[5,18,48],$Vl=[5,15,16,18,19,24,25,26,30,31,33,35,39,41,48,52,53,64,96,98,101,102,108],$Vm=[1,35],$Vn=[1,37],$Vo=[1,43],$Vp=[24,28],$Vq=[1,46],$Vr=[1,53],$Vs=[1,54],$Vt=[24,28,43,47,56,57,58,59,60,61,62,63,68,71,72,74,75,77,78,79,80,81,82,84,85,87,88,90,91,92,100],$Vu=[24,28,43,47,56,57,58,59,60,61,62,63,68,71,72,74,75,77,78,79,80,81,82,84,85,87,88,90,91,92,95,100],$Vv=[24,26,28,43,47,56,57,58,59,60,61,62,63,68,71,72,74,75,77,78,79,80,81,82,84,85,87,88,90,91,92,95,98,100],$Vw=[1,83],$Vx=[2,105],$Vy=[1,91],$Vz=[24,28,43,47,100],$VA=[24,28,43,47,68,100],$VB=[24,28,43,47,68,71,72,100],$VC=[24,28,43,47,68,71,72,74,75,100],$VD=[24,28,43,47,68,71,72,74,75,77,78,79,80,81,82,100],$VE=[24,28,43,47,68,71,72,74,75,77,78,79,80,81,82,84,85,100],$VF=[24,28,43,47,68,71,72,74,75,77,78,79,80,81,82,84,85,87,88,100],$VG=[24,28,43,47,68,71,72,74,75,77,78,79,80,81,82,84,85,87,88,90,91,92,100],$VH=[28,100],$VI=[5,15,16,18,19,24,25,26,30,31,33,35,39,41,48,52,53,64,96,98,101,102,106,107,108],$VJ=[28,43],$VK=[1,167],$VL=[1,168],$VM=[2,5],$VN=[1,171],$VO=[41,51],$VP=[1,207],$VQ=[1,213],$VR=[1,214],$VS=[18,50],$VT=[12,13,18];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"trait":19,"extends":20,"implements":21,"identifiers":22,"statement_with_semicolon":23,";":24,"while":25,"(":26,"e":27,")":28,"bracket_statements":29,"do":30,"switch":31,"case_statements":32,"for":33,"statement_with_semicolon_":34,"foreach":35,"var_name":36,"as":37,"=>":38,"if":39,"elif":40,"function":41,"parameters":42,",":43,"initialize_var1":44,"case_statement":45,"case":46,":":47,"break":48,"case_statements_":49,"default":50,"static":51,"return":52,"continue":53,"parallel_assignment":54,"dot_expr":55,"=":56,"++":57,"--":58,"+=":59,"%=":60,"-=":61,"*=":62,"/=":63,"list":64,"parallel_lhs":65,"parallel_rhs":66,"e6":67,"?":68,"...":69,"e5":70,"||":71,"or":72,"e4":73,"&&":74,"and":75,"e3":76,"!==":77,"===":78,"<=":79,"<":80,">=":81,">":82,"e2":83,">>":84,"<<":85,"e1":86,"+":87,"-":88,"not_expr":89,"*":90,"/":91,"%":92,"!":93,"parentheses_expr":94,"->":95,"new":96,"callable":97,"[":98,"exprs":99,"]":100,"STRING_LITERAL":101,"NUMBER":102,"parameter":103,"&":104,"else_if":105,"else":106,"elseif":107,"$":108,"var_names":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"trait",20:"extends",21:"implements",24:";",25:"while",26:"(",28:")",30:"do",31:"switch",33:"for",35:"foreach",37:"as",38:"=>",39:"if",41:"function",43:",",44:"initialize_var1",46:"case",47:":",48:"break",50:"default",51:"static",52:"return",53:"continue",56:"=",57:"++",58:"--",59:"+=",60:"%=",61:"-=",62:"*=",63:"/=",64:"list",68:"?",69:"...",71:"||",72:"or",74:"&&",75:"and",77:"!==",78:"===",79:"<=",80:"<",81:">=",82:">",84:">>",85:"<<",87:"+",88:"-",90:"*",91:"/",92:"%",93:"!",95:"->",96:"new",98:"[",100:"]",101:"STRING_LITERAL",102:"NUMBER",104:"&",106:"else",107:"elseif",108:"$"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,0],[9,1],[8,2],[8,1],[11,1],[11,1],[14,5],[14,5],[14,7],[14,7],[6,2],[6,1],[6,5],[6,7],[6,7],[6,9],[6,9],[6,7],[6,6],[6,5],[6,8],[22,3],[22,1],[34,1],[34,1],[45,6],[49,2],[49,1],[32,4],[32,1],[10,10],[10,9],[23,0],[23,2],[23,1],[23,1],[23,1],[23,3],[23,2],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,1],[54,9],[65,3],[65,3],[66,3],[66,3],[27,5],[27,2],[27,1],[67,3],[67,3],[67,1],[70,3],[70,3],[70,1],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,1],[76,3],[76,3],[76,1],[83,3],[83,3],[83,1],[86,3],[86,3],[86,3],[86,2],[86,1],[89,2],[89,1],[55,3],[55,1],[94,5],[94,1],[97,4],[97,4],[97,3],[97,7],[97,1],[97,1],[97,1],[97,3],[97,2],[97,3],[97,1],[103,1],[103,2],[103,3],[42,3],[42,1],[42,0],[99,3],[99,1],[105,2],[105,1],[40,6],[40,5],[40,2],[36,2],[109,3],[109,1],[29,3],[29,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 7: case 31:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 8: case 32: case 86: case 104:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["class_statements",[]]
break;
case 6:
this.$ = ["statements",$$[$0]]
break;
case 11:
this.$ = ["class","public",$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = ["trait","public",$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["class_extends","public",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_implements","public",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 15: case 117:
this.$ = ["semicolon",$$[$0-1]];
break;
case 17:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 18:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 19:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ["foreach_with_index","Object",$$[$0-4],$$[$0-2],$$[$0-6],$$[$0]];
break;
case 22:
this.$ = ["foreach","Object",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 23:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 24:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 25:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26: case 85: case 103: case 106: case 114:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 27: case 107: case 115:
this.$ = [$$[$0]];
break;
case 30:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 33:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 35:
this.$ = ["static_method",$$[$0-9],"Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 36:
this.$ = ["instance_method",$$[$0-8],"Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 38:
this.$ = ["return",$$[$0]];
break;
case 39:
this.$ = ["return"];
break;
case 40:
this.$ = ["continue"];
break;
case 42:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 43: case 44:
this.$ = [$$[$0],$$[$0-1]];
break;
case 45: case 46: case 47: case 48: case 49: case 59: case 60: case 62: case 63: case 67: case 68: case 69: case 70: case 72: case 73: case 75: case 76: case 78: case 79: case 80:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 51:
this.$ = ["parallel_assignment",["parallel_lhs",$$[$0-6]],["parallel_rhs",$$[$0-1]]]
break;
case 52: case 54:
this.$ = [$$[$0-2].concat([$$[$0]])];
break;
case 53: case 55:
this.$ = [$$[$0-2],$$[$0]]
break;
case 56:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 57:
this.$=["unpack_array",$$[$0]]
break;
case 65:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 66:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 81:
this.$ = ["-",$$[$0]];
break;
case 83:
this.$ = ["!", [".",$$[$0]]];
break;
case 84:
this.$ = [".", $$[$0]];
break;
case 87:
this.$= ["anonymous_class",$$[$0-1]]
break;
case 89:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 90:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 91:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 92:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 93: case 94: case 95: case 99:
this.$ = yytext;
break;
case 96:
this.$ = $$[$0-1];
break;
case 97:
this.$ = ["initializer_list","Object",[]];
break;
case 98:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 100:
this.$ = ["Object", $$[$0]];
break;
case 101:
this.$ = ["ref_parameter","Object", $$[$0]];
break;
case 102:
this.$ = ["default_parameter","Object", $$[$0-2],$$[$0]];
break;
case 105:
this.$ = [];
break;
case 110:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 111:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 112:
this.$ = ["else",$$[$0]];
break;
case 113:
this.$ = $$[$0];
break;
case 116:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,14:5,15:$V0,16:$V1,19:$V2,23:4,24:$V3,25:$V4,26:$V5,30:$V6,31:$V7,33:$V8,35:$V9,36:23,39:$Va,41:$Vb,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{1:[3]},{5:[1,30]},o($Vk,[2,3],{6:3,23:4,14:5,54:15,55:16,94:20,97:22,36:23,4:31,15:$V0,16:$V1,19:$V2,24:$V3,25:$V4,26:$V5,30:$V6,31:$V7,33:$V8,35:$V9,39:$Va,41:$Vb,52:$Vc,53:$Vd,64:$Ve,96:$Vf,98:$Vg,101:$Vh,102:$Vi,108:$Vj}),{24:[1,32]},o($Vl,[2,16]),{26:[1,33]},{16:$V1,17:$Vm,23:36,24:$V3,26:$V5,29:34,36:23,41:$Vn,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{26:[1,38]},{26:[1,39]},{26:[1,40]},{26:[1,41]},{16:[1,42],26:$Vo},o($Vp,[2,39],{94:20,97:22,36:23,27:44,67:45,70:47,73:48,76:49,83:50,86:51,89:52,55:55,16:$V1,26:$V5,41:$Vn,69:$Vq,88:$Vr,93:$Vs,96:$Vf,98:$Vg,101:$Vh,102:$Vi,108:$Vj}),o($Vp,[2,40]),o($Vp,[2,41]),o($Vp,[2,50],{56:[1,56],57:[1,57],58:[1,58],59:[1,59],60:[1,60],61:[1,61],62:[1,62],63:[1,63]}),{16:[1,64]},{16:[1,65]},{26:[1,66]},o($Vt,[2,86],{95:[1,67]}),{15:[1,68]},o($Vu,[2,88],{26:[1,70],98:[1,69]}),o($Vv,[2,93]),o($Vv,[2,94]),o($Vv,[2,95]),{16:$V1,26:$V5,27:71,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,27:74,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,99:73,100:[1,72],101:$Vh,102:$Vi,108:$Vj},o($Vv,[2,99]),{16:[1,75]},{1:[2,1]},o($Vk,[2,2]),o($Vl,[2,15]),{16:$V1,26:$V5,27:76,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{25:[1,77]},{4:79,6:3,9:78,14:5,15:$V0,16:$V1,19:$V2,23:4,24:$V3,25:$V4,26:$V5,30:$V6,31:$V7,33:$V8,35:$V9,36:23,39:$Va,41:$Vb,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{24:[1,80]},{26:$Vo},{16:$V1,26:$V5,27:81,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,23:84,24:$V3,26:$V5,34:82,36:23,41:$Vn,44:$Vw,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{36:85,108:$Vj},{16:$V1,26:$V5,27:86,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{26:[1,87]},{28:$Vx,36:90,42:88,103:89,104:$Vy,108:$Vj},o($Vp,[2,38]),o($Vz,[2,58],{68:[1,92]}),{16:$V1,26:$V5,36:23,41:$Vn,55:55,67:93,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},o($VA,[2,61],{71:[1,94],72:[1,95]}),o($VB,[2,64],{74:[1,96],75:[1,97]}),o($VC,[2,71],{77:[1,98],78:[1,99],79:[1,100],80:[1,101],81:[1,102],82:[1,103]}),o($VD,[2,74],{84:[1,104],85:[1,105]}),o($VE,[2,77],{87:[1,106],88:[1,107]}),o($VF,[2,82],{90:[1,108],91:[1,109],92:[1,110]}),{16:$V1,26:$V5,36:23,41:$Vn,55:55,86:111,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:112,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},o($VG,[2,84]),{16:$V1,26:$V5,27:113,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},o($Vp,[2,43]),o($Vp,[2,44]),{16:$V1,26:$V5,27:114,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,27:115,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,27:116,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,27:117,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,27:118,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{17:[1,119],20:[1,120],21:[1,121]},{17:[1,122]},{36:124,65:123,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,94:125,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{17:[1,126]},{16:$V1,26:$V5,27:74,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,99:127,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,27:74,28:[1,129],36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,99:128,101:$Vh,102:$Vi,108:$Vj},{28:[1,130]},o($Vv,[2,97]),{100:[1,131]},o($VH,[2,107],{43:[1,132]}),o([24,26,28,37,38,43,47,56,57,58,59,60,61,62,63,68,71,72,74,75,77,78,79,80,81,82,84,85,87,88,90,91,92,95,98,100],[2,113]),{28:[1,133]},{26:[1,134]},{18:[1,135]},o([18,48],[2,6]),o($VI,[2,117]),{28:[1,136]},{24:[1,137]},o($Vp,[2,28]),o($Vp,[2,29]),{37:[1,138]},{28:[1,139]},{28:$Vx,36:90,42:140,103:89,104:$Vy,108:$Vj},{28:[1,141]},{28:[2,104],43:[1,142]},o($VJ,[2,100],{56:[1,143]}),{36:144,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,67:145,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},o($Vz,[2,57]),{16:$V1,26:$V5,36:23,41:$Vn,55:55,67:146,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,67:147,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,70:148,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,70:149,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,73:150,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,73:151,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,73:152,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,73:153,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,73:154,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,73:155,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,76:156,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,76:157,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,83:158,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,83:159,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,86:160,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,86:161,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,36:23,41:$Vn,55:55,86:162,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},o($VF,[2,81]),o($VG,[2,83]),o($Vp,[2,42]),o($Vp,[2,45]),o($Vp,[2,46]),o($Vp,[2,47]),o($Vp,[2,48]),o($Vp,[2,49]),{7:163,8:164,10:165,11:166,12:$VK,13:$VL,18:$VM},{16:[1,169]},{16:$VN,22:170},{7:172,8:164,10:165,11:166,12:$VK,13:$VL,18:$VM},{28:[1,173],43:[1,174]},{43:[1,175]},o($Vt,[2,85]),{4:79,6:3,9:176,14:5,15:$V0,16:$V1,19:$V2,23:4,24:$V3,25:$V4,26:$V5,30:$V6,31:$V7,33:$V8,35:$V9,36:23,39:$Va,41:$Vb,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{100:[1,177]},{28:[1,178]},o($Vv,[2,91]),o($Vv,[2,96]),o($Vv,[2,98]),{16:$V1,26:$V5,27:74,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,99:179,101:$Vh,102:$Vi,108:$Vj},{16:$V1,17:$Vm,23:36,24:$V3,26:$V5,29:180,36:23,41:$Vn,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,27:181,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},o($VI,[2,116]),{17:[1,182]},{16:$V1,26:$V5,27:183,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{36:184,108:$Vj},{16:$V1,17:$Vm,23:36,24:$V3,26:$V5,29:185,36:23,41:$Vn,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{28:[1,186]},{17:[1,187]},{28:$Vx,36:90,42:188,103:89,104:$Vy,108:$Vj},{16:$V1,26:$V5,27:189,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},o($VJ,[2,101]),{47:[1,190]},o($VA,[2,59]),o($VA,[2,60]),o($VB,[2,62]),o($VB,[2,63]),o($VC,[2,65]),o($VC,[2,66]),o($VC,[2,67]),o($VC,[2,68]),o($VC,[2,69]),o($VC,[2,70]),o($VD,[2,72]),o($VD,[2,73]),o($VE,[2,75]),o($VE,[2,76]),o($VF,[2,78]),o($VF,[2,79]),o($VF,[2,80]),{18:[1,191]},{18:[2,4]},{8:192,10:165,11:166,12:$VK,13:$VL,18:[2,8]},{41:[1,194],51:[1,193]},o($VO,[2,9]),o($VO,[2,10]),{17:[1,195]},{17:[1,196]},{17:[2,27],43:[1,197]},{18:[1,198]},{56:[1,199]},{36:200,108:$Vj},{36:201,108:$Vj},{18:[1,202]},o($Vv,[2,89]),o($Vv,[2,90]),o($VH,[2,106]),o($Vl,[2,17]),{28:[1,203]},{32:204,45:206,46:$VP,49:205},{24:[1,208]},{28:[1,210],38:[1,209]},o($Vl,[2,24],{40:211,105:212,106:$VQ,107:$VR}),{17:[1,215]},{4:79,6:3,9:216,14:5,15:$V0,16:$V1,19:$V2,23:4,24:$V3,25:$V4,26:$V5,30:$V6,31:$V7,33:$V8,35:$V9,36:23,39:$Va,41:$Vb,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{28:[2,103]},o($VJ,[2,102]),{16:$V1,26:$V5,27:217,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},o($Vl,[2,11]),{18:[2,7]},{41:[1,218]},{16:[1,219]},{7:220,8:164,10:165,11:166,12:$VK,13:$VL,18:$VM},{7:221,8:164,10:165,11:166,12:$VK,13:$VL,18:$VM},{16:$VN,22:222},o($Vl,[2,12]),{64:[1,223]},o($VJ,[2,52]),o($VJ,[2,53]),o($Vu,[2,87]),{24:[1,224]},{18:[1,225]},{18:[2,34],50:[1,226]},o($VS,[2,32],{45:206,49:227,46:$VP}),{16:$V1,26:$V5,27:228,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,23:84,26:$V5,28:$V3,34:229,36:23,41:$Vn,44:$Vw,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{36:230,108:$Vj},{16:$V1,17:$Vm,23:36,24:$V3,26:$V5,29:231,36:23,41:$Vn,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},o($Vl,[2,23]),{26:[1,232]},{16:$V1,17:$Vm,23:36,24:$V3,26:$V5,29:233,36:23,39:[1,234],41:$Vn,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{26:[2,109]},{4:79,6:3,9:235,14:5,15:$V0,16:$V1,19:$V2,23:4,24:$V3,25:$V4,26:$V5,30:$V6,31:$V7,33:$V8,35:$V9,36:23,39:$Va,41:$Vb,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{18:[1,236]},o($Vz,[2,56]),{16:[1,237]},{26:[1,238]},{18:[1,239]},{18:[1,240]},{17:[2,26]},{26:[1,241]},o($Vl,[2,18]),o($Vl,[2,19]),{47:[1,242]},o($VS,[2,31]),{47:[1,243]},{28:[1,244]},{28:[1,245]},o($Vl,[2,22]),{16:$V1,26:$V5,27:246,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},o($Vl,[2,112]),{26:[2,108]},{18:[1,247]},o($Vv,[2,92]),{26:[1,248]},{28:$Vx,36:90,42:249,103:89,104:$Vy,108:$Vj},o($Vl,[2,13]),o($Vl,[2,14]),{16:$V1,26:$V5,27:251,36:23,41:$Vn,55:55,66:250,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{4:79,6:3,9:252,14:5,15:$V0,16:$V1,19:$V2,23:4,24:$V3,25:$V4,26:$V5,30:$V6,31:$V7,33:$V8,35:$V9,36:23,39:$Va,41:$Vb,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{4:79,6:3,9:253,14:5,15:$V0,16:$V1,19:$V2,23:4,24:$V3,25:$V4,26:$V5,30:$V6,31:$V7,33:$V8,35:$V9,36:23,39:$Va,41:$Vb,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,17:$Vm,23:36,24:$V3,26:$V5,29:254,36:23,41:$Vn,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,17:$Vm,23:36,24:$V3,26:$V5,29:255,36:23,41:$Vn,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{28:[1,256]},o($Vl,[2,25]),{28:$Vx,36:90,42:257,103:89,104:$Vy,108:$Vj},{28:[1,258]},{28:[1,259],43:[1,260]},{43:[1,261]},{18:[2,33]},{48:[1,262]},o($Vl,[2,20]),o($Vl,[2,21]),{16:$V1,17:$Vm,23:36,24:$V3,26:$V5,29:263,36:23,41:$Vn,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{28:[1,264]},{17:[1,265]},o($Vp,[2,51]),{16:$V1,26:$V5,27:266,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{16:$V1,26:$V5,27:267,36:23,41:$Vn,55:55,67:45,69:$Vq,70:47,73:48,76:49,83:50,86:51,88:$Vr,89:52,93:$Vs,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{24:[1,268]},o($Vl,[2,111],{105:212,40:269,106:$VQ,107:$VR}),{17:[1,270]},{4:79,6:3,9:271,14:5,15:$V0,16:$V1,19:$V2,23:4,24:$V3,25:$V4,26:$V5,30:$V6,31:$V7,33:$V8,35:$V9,36:23,39:$Va,41:$Vb,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},o($VJ,[2,54]),o($VJ,[2,55]),o([18,46,50],[2,30]),o($Vl,[2,110]),{4:79,6:3,9:272,14:5,15:$V0,16:$V1,19:$V2,23:4,24:$V3,25:$V4,26:$V5,30:$V6,31:$V7,33:$V8,35:$V9,36:23,39:$Va,41:$Vb,52:$Vc,53:$Vd,54:15,55:16,64:$Ve,94:20,96:$Vf,97:22,98:$Vg,101:$Vh,102:$Vi,108:$Vj},{18:[1,273]},{18:[1,274]},o($VT,[2,36]),o($VT,[2,35])],
defaultActions: {30:[2,1],164:[2,4],188:[2,103],192:[2,7],214:[2,109],222:[2,26],234:[2,108],252:[2,33]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 102
break;
case 4:return 101
break;
case 5:return "$"
break;
case 6:return 60
break;
case 7:return "function"
break;
case 8:return "class"
break;
case 9:return "public"
break;
case 10:return "extends"
break;
case 11:return "implements"
break;
case 12:return "private"
break;
case 13:return "static"
break;
case 14:return 96
break;
case 15:return 75
break;
case 16:return 72
break;
case 17:return "if"
break;
case 18:return "do"
break;
case 19:return "elseif"
break;
case 20:return "else"
break;
case 21:return "return"
break;
case 22:return "as"
break;
case 23:return "while"
break;
case 24:return "break"
break;
case 25:return "switch"
break;
case 26:return "default"
break;
case 27:return "case"
break;
case 28:return "foreach"
break;
case 29:return "continue"
break;
case 30:return "for"
break;
case 31:return 93
break;
case 32:return 43
break;
case 33:return 38
break;
case 34:return 95
break;
case 35:return 24
break;
case 36:return 47
break;
case 37:return 74
break;
case 38:return 104
break;
case 39:return 71
break;
case 40:return '|'
break;
case 41:return 81
break;
case 42:return 84
break;
case 43:return 82
break;
case 44:return 79
break;
case 45:return 85
break;
case 46:return 80
break;
case 47:return 78
break;
case 48:return 77
break;
case 49:return 56
break;
case 50:return 62
break;
case 51:return 90
break;
case 52:return 63
break;
case 53:return 91
break;
case 54:return 92
break;
case 55:return 61
break;
case 56:return 58
break;
case 57:return 88
break;
case 58:return 57
break;
case 59:return 59
break;
case 60:return 87
break;
case 61:return 69
break;
case 62:return '.'
break;
case 63:return '^'
break;
case 64:return 68
break;
case 65:return 17
break;
case 66:return 18
break;
case 67:return ']['
break;
case 68:return 98
break;
case 69:return 100
break;
case 70:return 26
break;
case 71:return 28
break;
case 72:return 16
break;
case 73:return 5
break;
case 74:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:(\/\/|#).*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:%=)/,/^(?:function\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:new\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:as\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:foreach\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:!)/,/^(?:,)/,/^(?:=>)/,/^(?:->)/,/^(?:;)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = php_parser;
exports.Parser = php_parser.Parser;
exports.parse = function () { return php_parser.parse.apply(php_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}